name: CI
on:
- push
- pull_request
- workflow_dispatch
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Determine version
      id: determine-version
      run: |
        readonly GIT_DESCRIBE=$(git describe --always --tags --dirty)
        echo "::set-output name=version::${GIT_DESCRIBE#v}"
  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        toolchain:
        - linux_amd64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build
      run: |
        bazelisk build --config=ci --platforms @io_bazel_rules_go//go/toolchain:${{ matrix.toolchain }} //:archive
        echo "archive=$(bazelisk info bazel-bin)/archive.tar.gz" >> $GITHUB_ENV
    - name: Upload binary artifact
      uses: actions/upload-artifact@v2
      with:
        name: plexbackup-${{ needs.version.outputs.version }}-${{ matrix.toolchain }}.tar.gz
        path: ${{ env.archive }}
  release:
    runs-on: ubuntu-latest
    needs: [version, build]  # not transitive
    #if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Debug
      run: |
        ls -lhR artifacts/
        echo "${{ needs.version.outputs.version }}"
    #- name: Release
    #  uses: softprops/action-gh-release@v1
    #  with:
    #    files: |
    #      Release.txt
    #      LICENSE
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    

#Ideally:
#    on push
#        in parallel: build each arch, publish as downloadable artifact
#    on tag
#        create release
#        in parallel: build each arch, publish as downloadable artifact, attach to created release
#
#softprops/action-gh-release?
